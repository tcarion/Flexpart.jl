var documenterSearchIndex = {"docs":
[{"location":"lib/internals/flexpart/#Flexpart.DeterministicInput","page":"Internals","title":"Flexpart.DeterministicInput","text":"DeterministicInput\n\nObject that represents a deterministic input file.\n\ntime::Dates.DateTime: Time of the input file\nfilename::String: Filename of the input file\ndirpath::String: Absolute path of the directory\n\n\n\n\n\n","category":"type"},{"location":"lib/internals/flexpart/#Flexpart.DeterministicOutput","page":"Internals","title":"Flexpart.DeterministicOutput","text":"DeterministicInput\n\nObject that represents a deterministic output file.\n\npath::String: Path to the output file\ntype::String: Type of the output file (ncf, binary)\n\n\n\n\n\n","category":"type"},{"location":"lib/internals/flexpart/#Flexpart.EnsembleInput","page":"Internals","title":"Flexpart.EnsembleInput","text":"EnsembleInput\n\nObject that represents a ensemble input file.\n\ntime::Dates.DateTime: Time of the input file\nfilename::String: Filename of the input file\nmember::Int64: Ensemble member number of the input file\ndirpath::String: Absolute path of the directory\n\n\n\n\n\n","category":"type"},{"location":"lib/internals/flexpart/#Flexpart.EnsembleOutput","page":"Internals","title":"Flexpart.EnsembleOutput","text":"EnsembleInput\n\nObject that represents a ensemble output file.\n\npath::String: Path to the output file\ntype::String: Type of the output file (ncf, binary)\nmember::Int64: Ensemble member number\n\n\n\n\n\n","category":"type"},{"location":"lib/internals/flexpart/#Flexpart.FlexpartSim","page":"Internals","title":"Flexpart.FlexpartSim","text":"struct FlexpartSim{SimType} <: Flexpart.AbstractFlexDir\n\nFlexpartSim represents the directory where the pathnames file is located. pathnames is the file indicating the paths  to the files and directories needed by Flexpart (options, output, input and available).\n\nThe FlexpartSim object also indicates the type of the simulation:\n\nFlexpartSim{Deterministic} for deterministic flexpart runs\nFlexpartSim{Ensemble} for ensemble flexpart runs\n\nIf no type parameter is provided when using FlexpartSim constructors, the default will be Deterministic.\n\n\n\n\n\n","category":"type"},{"location":"lib/internals/flexpart/#Flexpart.FlexpartSim-Union{Tuple{Function}, Tuple{T}} where T","page":"Internals","title":"Flexpart.FlexpartSim","text":"FlexpartSim(f::Function) -> Any\n\n\nApply the function f to a FlexpartSim created in a temporary directory, and remove all of its content upon completion.\n\nExamples\n\njulia> FlexpartSim() do fpsim             default_run(fpsim)         end ```\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/flexpart/#Flexpart.FlexpartSim-Union{Tuple{String}, Tuple{T}} where T","page":"Internals","title":"Flexpart.FlexpartSim","text":"FlexpartSim(path::String) -> FlexpartSim{Deterministic}\n\n\nRead the pathnames file in path to create a FlexpartSim.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/flexpart/#Flexpart.FlexpartSim-Union{Tuple{}, Tuple{T}} where T","page":"Internals","title":"Flexpart.FlexpartSim","text":"FlexpartSim() -> FlexpartSim{Deterministic}\n\n\nCreate a FlexpartSim in a temporary directory whith the default options and pathnames. It can be copied afterwards with copy.\n\nThe default paths for the pathnames are:\n\n[\"./options/\", \"./output/\", \"./input/\", \"./AVAILABLE\"]\n\nExamples\n\njulia> FlexpartSim()\nFlexpartSim{Deterministic} @ /tmp/jl_a8gDYX\npathnames:\n        :options => \"./options/\"\n        :output => \"./output/\"\n        :input => \"./input/\"\n        :available => \"./AVAILABLE\"\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/flexpart/#Flexpart.FpPathnames","page":"Internals","title":"Flexpart.FpPathnames","text":"FpPathnames\n\nObject that represents the pathnames file. The paths are expected in the following order:\n\ndirpath\noptions\noutput\ninput\navailable\n\n\n\n\n\n","category":"type"},{"location":"lib/internals/flexpart/#Flexpart.copy-Tuple{FlexpartSim, String}","page":"Internals","title":"Flexpart.copy","text":"copy(fpsim::FlexpartSim, path::String)\n\n\nCopy an existing FlexpartSim to path.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/flexpart/#Flexpart.run-Tuple{FlexpartSim{Deterministic}}","page":"Internals","title":"Flexpart.run","text":"run(fpsim::FlexpartSim{Deterministic}; log) -> Any\n\n\nRun Flexpart using the paths of fpsim.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/flexpart/#Flexpart.save-Tuple{FlexpartSim}","page":"Internals","title":"Flexpart.save","text":"save(fpsim::FlexpartSim)\n\n\nWrite the current FlexpartSim paths to the pathnames file.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/flexpart/#Flexpart.saveabs-Tuple{FlexpartSim}","page":"Internals","title":"Flexpart.saveabs","text":"saveabs(fpsim::FlexpartSim) -> String\n\n\nWrite the current FlexpartSim paths to the pathnames file. Relative paths are converted to absolute path.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/flexpart/#Flexpart.set_cmd_dates!-Tuple{FlexpartOption, Available}","page":"Internals","title":"Flexpart.set_cmd_dates!","text":"set_cmd_dates!(\n    options::FlexpartOption,\n    avs::Available\n) -> String\n\n\nUpdate the simulation start and stop options from the inputs available in avs. \n\n\n\n\n\n","category":"method"},{"location":"lib/internals/flexpart/#Flexpart.set_cmd_dates!-Tuple{FlexpartOption, Dates.DateTime, Dates.DateTime}","page":"Internals","title":"Flexpart.set_cmd_dates!","text":"set_cmd_dates!(\n    options::FlexpartOption,\n    start::Dates.DateTime,\n    stop::Dates.DateTime\n) -> String\n\n\nUpdate the simulation start and stop options with start date and stop date. \n\n\n\n\n\n","category":"method"},{"location":"lib/internals/flexpart/#Flexpart.set_point_release!-Tuple{OrderedCollections.OrderedDict{Symbol, Flexpart.OptionEntry}, Any, Any}","page":"Internals","title":"Flexpart.set_point_release!","text":"set_point_release!(\n    release::OrderedCollections.OrderedDict{Symbol, Flexpart.OptionEntry},\n    lon,\n    lat\n) -> Any\n\n\nUpdate a release option release location with lon and lat.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/flexpart/#Flexpart.set_release_dates!-Tuple{OrderedCollections.OrderedDict{Symbol, Flexpart.OptionEntry}, Dates.DateTime, Dates.DateTime}","page":"Internals","title":"Flexpart.set_release_dates!","text":"set_release_dates!(\n    release::OrderedCollections.OrderedDict{Symbol, Flexpart.OptionEntry},\n    start::Dates.DateTime,\n    stop::Dates.DateTime\n) -> String\n\n\nUpdate a release option release start and stop datetime given the start and stop DateTime.\n\nExamples\n\njulia> fpoptions = FlexpartOption(FlexpartSim())\njulia> Flexpart.set_release_dates!(fpoptions[\"RELEASES\"][:RELEASE][1], Dates.now(), Dates.now() + Dates.Second(120))\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/flexpart/#Flexpart.set_release_duration!-Tuple{OrderedCollections.OrderedDict{Symbol, Flexpart.OptionEntry}, Dates.DateTime, Dates.AbstractTime}","page":"Internals","title":"Flexpart.set_release_duration!","text":"set_release_duration!(\n    release::OrderedCollections.OrderedDict{Symbol, Flexpart.OptionEntry},\n    start::Dates.DateTime,\n    duration::Dates.AbstractTime\n) -> String\n\n\nUpdate a release option release start and stop datetime given the start and duration.\n\nExamples\n\njulia> fpoptions = FlexpartOption(FlexpartSim())\njulia> Flexpart.set_release_duration!(fpoptions[\"RELEASES\"][:RELEASE][1], Dates.now(), Dates.Second(120))\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/flexpart/#Flexpart.set_specie!-Tuple{FlexpartOption, String}","page":"Internals","title":"Flexpart.set_specie!","text":"set_specie!(\n    fpoptions::FlexpartOption,\n    specie::String\n) -> Int64\n\n\nUpdate the specie number in the RELEASES options from the name specie.\n\nExamples\n\njulia> Flexpart.set_specie!(FlexpartOption(FlexpartSim()), \"CH4\")\n26\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/flexpart/#Flexpart.specie_number-Tuple{AbstractString}","page":"Internals","title":"Flexpart.specie_number","text":"specie_number(specie::AbstractString) -> Any\n\n\nReturn specie number needed for the RELEASES options from the name specie.\n\nExamples\n\njulia> Flexpart.specie_number(\"CH4\")\n26\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/flexpart/#Flexpart.species_name-Tuple{}","page":"Internals","title":"Flexpart.species_name","text":"species_name() -> Vector\n\n\nReturn the names of the species that are available by default with Flexpart\n\n\n\n\n\n","category":"method"},{"location":"#Flexpart.jl-Documentation","page":"Home","title":"Flexpart.jl Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Flexpart.jl is a package that allow to prepare and run the Flexpart Lagrangian atmospheric dispersion model with a Julia interface. More precisely, it is possible to:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Retrieve the meteorological data from the ECMWF MARS system. It wraps the flex_extract software that retrieve the meteorological fields and pre-process them to produce inputs for Flexpart.\nModify the options of Flexpart in a Julia way.\nRun simulations with an existing installation of Flexpart.","category":"page"}]
}
